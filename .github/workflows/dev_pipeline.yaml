name: Dev Pipeline Deploy To ECS

on:
    workflow_dispatch:

env:
    SERVICE_NAME: ct-backend-service
    CLUSTER_NAME: testecs
    CONTAINER_NAME: pythonbackend
    TASK_DEFINITION: pythonbackend
    REPO_NAME: testpython

jobs:
    build:
        runs-on: ubuntu-latest
        
        outputs:
            image_version: ${{ steps.image_version.outputs.new_version }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                ref: master

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.DEV_AWS_REGION }}
            
            - name: Get and Update Image version
              id: app_version
              run: |
                latest_tag=$(aws ecr describe-images --repository-name ${{ env.REPO_NAME }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
                if [ -z "$latest_tag" -o "$latest_tag" == "" -o "$latest_tag" == "latest" ]; then
                    version=1 
                    echo "version=$version" >> "$GITHUB_OUTPUT"
                else
                    last_version="${latest_tag#v}"
                    ((last_version++))
                    version=$last_version
                    echo "version=$version" >> "$GITHUB_OUTPUT"
                fi
            
                
             

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push
              id: docker_image
              uses: docker/build-push-action@v4
              with:
                push: true
                tags: ${{ vars.DEV_IMAGE_REPO }}:v${{ steps.app_version.outputs.version }}
            
            - name: Publish Pushed Image Version
              id: image_version
              run: echo "new_version=v${{ steps.app_version.outputs.version }}" >> "$GITHUB_OUTPUT"
    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.DEV_AWS_REGION }}

            - name: Download task definition
              run: |
                aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
                echo "image version is : ${{needs.build.outputs.image_version}}"
            - name: Update ECS task definition Image Name
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: ${{ env.CONTAINER_NAME }}
                image: "${{ vars.DEV_IMAGE_REPO }}:${{ needs.build.outputs.image_version }}"
        
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ env.SERVICE_NAME }}
                cluster: ${{ env.CLUSTER_NAME }}
                wait-for-service-stability: false
            
            
